generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String         @id @default(cuid())
  name                  String         @unique
  email                 String         @unique
  emailVerified         DateTime?
  image                 String?
  phone                 String?
  address               String?
  password              String?
  role                  String?        @default("user")
  displayName           String?
  status                String         @default("active")
  createdAt             DateTime       @default(now())
  Archives              Archive[]
  cart                  CartItem[]
  orders                Order[]
  products              Product[]
  accounts              Account[]
  comments              Comment[]
  receivedNotifications Notification[] @relation("Recipient")
  issuedNotifications   Notification[] @relation("Issuer")
  posts                 Post[]
  sessions              Session[]

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  email             String?
  userName          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String
  expires DateTime

  @@unique([email, token])
  @@map("verificationtokens")
}

model Tag {
  id        String   @id @default(cuid())
  name      String
  info      String?
  createdAt DateTime @default(now())
  posts     Post[]   @relation("PostToTag")

  @@map("tags")
}

model Archive {
  id        String    @id @default(cuid())
  url       String
  userId    String
  createdAt DateTime  @default(now())
  expiresAt DateTime?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id                  String         @id @default(cuid())
  title               String
  desc                String
  link                String
  content             String
  images              String[]
  contentImages       String[]
  status              String         @default("DRAFT")
  discussions         Boolean        @default(false)
  isHot               Boolean        @default(false)
  userId              String
  createdAt           DateTime       @default(now())
  expiresAt           DateTime?
  updatedAt           DateTime       @updatedAt
  faqs                Faq[]
  comments            Comment[]
  linkedNotifications Notification[]
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags                Tag[]          @relation("PostToTag")

  @@map("posts")
}

model Faq {
  id        String   @id @default(cuid())
  question  String
  answer    String
  postId    String?
  productId String?
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Advertise {
  id        String    @id @default(cuid())
  title     String
  link      String
  content   String
  tags      String    @default("Ad")
  images    String[]
  isHot     Boolean   @default(false)
  published Boolean   @default(false)
  createdAt DateTime  @default(now())
  expiresAt DateTime?
  updatedAt DateTime  @updatedAt

  @@map("advertises")
}

model Banner {
  id        String    @id @default(cuid())
  title     String
  link      String
  content   String
  tags      String    @default("Ad")
  images    String[]
  isHot     Boolean   @default(false)
  published Boolean   @default(false)
  createdAt DateTime  @default(now())
  expiresAt DateTime?
  updatedAt DateTime  @updatedAt

  @@map("banners")
}

model Product {
  id                  String         @id @default(cuid())
  name                String
  desc                String
  content             String
  feature             String?
  images              String[]
  sellerId            String
  createdAt           DateTime       @default(now())
  expiresAt           DateTime?
  updatedAt           DateTime       @updatedAt
  cartItems           CartItem[]
  colors              Color[]
  faqs                Faq[]
  orderItems          OrderItem[]
  seller              User           @relation(fields: [sellerId], references: [id])
  comments            Comment[]
  linkedNotifications Notification[]
}

model Color {
  id         String      @id @default(cuid())
  name       String
  hexCode    String
  discount   Float?      @default(0)
  stocks     Int         @default(0)
  status     String      @default("NON-EXISTENT")
  price      Float
  productId  String
  updatedAt  DateTime?   @updatedAt
  createdAt  DateTime    @default(now())
  cartItems  CartItem[]
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int      @default(1)
  productId String
  colorId   String?
  userId    String
  createdAt DateTime @default(now())
  color     Color?   @relation(fields: [colorId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, productId, colorId])
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  recipient   String
  phone       String?
  address     String?
  total       Float
  status      OrderStatus @default(PENDING)
  paymentId   String?
  paymentDate DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id])
  items       OrderItem[]
}

model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int
  price     Float
  productId String
  colorId   String
  orderId   String
  color     Color   @relation(fields: [colorId], references: [id], onDelete: Cascade)
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  userId    String?
  postId    String?
  productId String?
  parentId  String?
  createdAt DateTime  @default(now())
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("CommentReplies")
  post      Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  product   Product?  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}



model Notification {
  id          String           @id @default(cuid())
  recipientId String
  recipient   User             @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  issuerId    String           
  issuer      User             @relation("Issuer", fields: [issuerId], references: [id], onDelete: Cascade)
  postId      String?
  post        Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  productId   String?
  product     Product?         @relation(fields: [productId], references: [id], onDelete: Cascade)
  type        NotificationType?
  read        Boolean          @default(false)

  createdAt DateTime @default(now())
  @@map("notifications")
}

model Report {
  id        String     @id @default(cuid())
  reason    String
  message   String
  url       String
  type      ReportType
  createdAt DateTime   @default(now())

  @@map("reports")
}

enum NotificationType {
  COMMENT
  REPLY
  POST
  PAID
  DELIVERED
}

enum ReportType {
  USER
  REPLY
  COMMENT
  POST
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

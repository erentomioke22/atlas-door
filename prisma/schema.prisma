

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String         @id @default(cuid())
  name                  String         @unique
  email                 String         @unique
  emailVerified         DateTime?
  image                 String?
  accounts              Account[]
  sessions              Session[]
  posts                 Post[]
  products              Product[]
  cart                  CartItem[]
  orders                Order[]
  comments              Comment[]
  Archives              Archive[]
  password              String?
  role                  String?         @default("user")
  displayName           String?
  receivedNotifications Notification[] @relation("Recipient")
  // issuedNotifications   Notification[] @relation("Issuer")
  status                String        @default("active")
  createdAt DateTime @default(now())

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  email             String?
  userName          String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  id         String @id @default(cuid()) @map("_id") 
  email      String
  token      String
  expires    DateTime
 
  @@unique([email,token])
  @@map("verificationtokens")
}

model Tag{
  id      String @id @default(cuid())
  name    String
  info    String?
  posts   Post[]
  
  createdAt DateTime @default(now())

  @@map("tags")
}

model Archive{
  id      String @id @default(cuid())
  url     String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String

  createdAt     DateTime @default(now())
  expiresAt     DateTime? 
}
model Post {
  id                  String         @id @default(cuid())
  title               String
  desc               String
  link                String
  content             String
  tags                Tag[]
  images              String[]
  comments            Comment[]
  contentImages       String[]
  status              String       @default("DRAFT")
  // save                Boolean       @default(false)
  discussions         Boolean       @default(false) 
  isHot               Boolean       @default(false)
  linkedNotifications Notification[]
  faqs                 Faq[]
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String

  createdAt     DateTime @default(now())
  expiresAt     DateTime?      
  updatedAt     DateTime      @updatedAt
  @@map("posts")
}

model Faq {
 id        String    @id @default(cuid())
 question  String
 answer    String
 post      Post?      @relation(fields: [postId], references: [id], onDelete: Cascade)
 postId    String?
 product   Product?   @relation(fields: [productId], references: [id], onDelete: Cascade)
 productId String?
}


model Advertise {
  id            String         @id @default(cuid())
  title         String
  link          String
  content       String
  tags          String          @default("Ad")
  images        String[]
  isHot         Boolean       @default(false)
  published     Boolean       @default(false)

  createdAt     DateTime @default(now())
  expiresAt     DateTime?      
  updatedAt     DateTime      @updatedAt
  @@map("advertises")
}

model Banner {
  id            String         @id @default(cuid())
  title         String
  link          String
  content       String
  tags          String          @default("Ad")
  images        String[]
  isHot         Boolean       @default(false)
  published     Boolean       @default(false)

  createdAt     DateTime @default(now())
  expiresAt     DateTime?      
  updatedAt     DateTime      @updatedAt
  @@map("banners")
}


model Product {
  id            String         @id @default(cuid())
  name          String
  desc          String
  content       String
  colors        Color[]
  feature       String?
  images        String[]
  comments      Comment[]
  faqs          Faq[]
  seller        User           @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId      String
  cartItems     CartItem[]
  orderItems    OrderItem[]
  // price         Float
  // code          String?        @unique @default(autoincrement())

  createdAt     DateTime @default(now())
  expiresAt     DateTime?      
  updatedAt     DateTime @updatedAt
}

model Color {
  id            String  @id @default(cuid())
  name          String
  hexCode       String
  discount      Float?         @default(0)
  stocks        Int            @default(0)
  status        String         @default("NON-EXISTENT")
  price         Float
  product       Product @relation(fields: [productId], references: [id])
  productId     String
  cartItems     CartItem[]
  orderItems    OrderItem[]
  updatedAt     DateTime? @updatedAt
  createdAt     DateTime @default(now())
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int      @default(1)
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  color     Color?    @relation(fields: [colorId], references: [id])
  colorId   String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())

  @@unique([userId, productId,colorId])
}

model Order {
  id          String      @id @default(cuid())
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  items       OrderItem[]
  total       Float
  status      OrderStatus @default(PENDING)
  paymentId   String?
  paymentDate DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  price     Float
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  color     Color    @relation(fields: [colorId], references: [id])
  colorId   String
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
}



model Comment {
  id           String      @id @default(cuid()) 
  content      String
  user         User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String?
  name         String
  email        String
  post         Post        @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId       String
  product      Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId    String
  parent       Comment?    @relation("CommentReplies", fields: [parentId], references: [id] , onDelete: Cascade) 
  parentId     String? 
  replies      Comment[]   @relation("CommentReplies")  

  createdAt DateTime @default(now())

  @@map("comments")
}





model Notification {
  id          String           @id @default(cuid())
  recipientId String           @default("cm3ylcs6e0001sax09jd68m16")
  recipient   User             @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade) 
  name        String
  email       String
  postId      String?
  post        Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  type        NotificationType?
  read        Boolean          @default(false)

  createdAt DateTime @default(now())
//  @@unique([recipientId])
  @@map("notifications")
}

model Report {
  id          String           @id @default(cuid())
  reason      String
  message     String           
  url         String
  type        ReportType

  createdAt DateTime @default(now())

  @@map("reports")
}

enum NotificationType {
  COMMENT
  POST
}

enum ReportType {
  USER
  REPLY
  COMMENT
  POST
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}